/**
 * 给定数组arr，设长度为n，输出arr的最长递增子序列。
 * （如果有多个答案，请输出其中 按数值(注：区别于按单个字符的ASCII码值)进行比较的 字典序最小的那个）
 * 
 * retrun the longest increasing subsequence
 * @param arr int整型一维数组 the array
 * @return int整型一维数组
 */
// 1. O(n^2)
// dp[i] = 第 i 位最长连续子序列
/**
 * retrun the longest increasing subsequence
 * @param arr int整型一维数组 the array
 * @return int整型一维数组
 */
function LISI( arr ) {
  // write code here
  if(!arr.length) return [];
  const dp = Array(arr.length).fill(1);
  let max = 1;
  for(let i = 1; i < arr.length; i++) {
    for(let j = 0; j < i; j++) {
      if(arr[i] >= arr[j]) {
        dp[i] = Math.max(dp[i], dp[j] + 1);
      }
    }
    max = Math.max(max, dp[i]);
  }
  const res = Array(max);
  for(let i = dp.length - 1; i >= 0 && max > 0; i--) {
    if(dp[i] === max) {
      res[--max] = arr[i];
    }
  }
  return res;
}

// 2. 二分
function LIS( arr ) {
  // write code here
  if(!arr.length) return [];
  const dp = [1];
  const temp = [arr[0]];
  let n = 1;
  for(let i = 1; i < arr.length; i++) {
    if(temp[temp.length - 1] < arr[i]) {
      temp.push(arr[i]);
      dp[i] = temp.length;
    } else {
      let l = 0, r = temp.length - 1;
      while(l <= r) {
        const m = Math.floor((l + r) / 2);
        if(temp[m] >= arr[i]) {
          r = m - 1;
        } else {
          l = m + 1;
        }
      }
      temp[l] = arr[i];
      dp[i] = l + 1;
    }
    n = Math.max(n ,dp[i]);
  }
  const res = Array(n);
  for(let i = dp.length - 1; i >= 0 && n > 0; i--) {
    if(dp[i] === n) {
      res[--n] = arr[i];
    }
  }
  return res;
}

module.exports = {
  LIS : LIS
};

// [2,1,5,3,4,6]
//...............0,1,2,3,4,5,6,7,8
// console.log(LIS([2,1,5,3,6,4,8,9,7]));
// console.log(LIS([1,2,3,5]));
// console.log(LIS([11,2,22,3,33,4,55]));
// const list = [49506168,69680825,12509291,48480857,25223382,19183828,59158379,86939717,40645996,6308877,10012993,63667893,50197187,24801729,25023038,47920500,20403356,51081751,53271648,93798698,17212977,33985688,41235650,53107971,28540590,88207258,41085783,67747947,79259171,38774038,47976443,69145317,23674167,23375819,64283405,53278302,6842944,32835306,65425302,57452938,44061263,33188353,36344809,40853306,42614674,18170661,62426275,95157030,93852465,14694594,27510732,6588658,76929617,44994473,15916331,34728593,92424819,24068421,62452242,72288496,58516068,38068970,32887138,7139725,55989211,44497486,99670615,43652169,55855016,8400743,4818109,36575316,59923999,37546251,68006009,80237095,61109920,82015485,38021784,48795556,74632998,9965861,57739193,86269790,33882927,68623665,18399472,72220645,28234019,56500908,45331825,14190203,61666988,69450522,84914849,56895970,45318684,9731080,57102758,65566000,41127251,93881179,24211530,14612193,12776968,54282870,77449039,14614543,10452592,43882497,80167247,44983066,49385171,78410318,3217127,33005856,85182575,36989391,38449809,2911542,68429766,77191995,76243538,20020672,66558032,22275577,67428579,45646061,19018102,80222016,11140706,94847351,83553167,79044071,90850947,97638757,19696162,5048263,45061895,10593784,11021585,99548228,49185118,61558041,12610798,97813429,50893959,2713568,69272475,31077457,42420740,59173742,93617193,91864670,52983094,37514765,68354281,85020387,77986223,75058335,96845131,81350492,29429045,77600838,41262844,45486388,80954883,32599496,702276,4556193,34582951,19682454,83378302,41782749,14076100,96274088,78270415,12807780,30525346,47770502,32686532,10202644,99867103,35679757,83579122,66953903,33798266,92395268,92157568,68632614,92870081,60089710,17259480,39140199,10741134,72444225,41352082,84860231,12379452,51319632,88499194,8118188,86222124,34304236,32705905,32390605,73422752,8937703,61493948,80959554,21645368,64942393,45992623,99078241,29117293,57363337,98560912,14525441,36108065,99840919,11441667,53981978,24293858,23092771];
// const list = [521,523,55,624,583,235,45,43,60,50,2234,24,1,2,3,];
// const list = [7,6,5,4,3,2,1];
const list = [2, 3, 1, 2, 3];
console.log(LIS(list));
