/**
 * 请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * 
 * 注意：
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 
 * 提示：
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字或者 '.'
 * 
 * @param {character[][]} board
 * @return {boolean}
 */

// 遍历
var isValidSudoku = function(board) {
  const set1 = new Set();
  const set2 = new Set();
  // 行、列遍历
  for(let i = 0; i < 9; i++) {
    set1.clear();
    set2.clear();
    for(let j = 0; j < 9; j++) {
      if(board[i][j] !== '.' && set1.has(board[i][j])) return false;
      set1.add(board[i][j]);

      if(board[j][i] !== '.' && set2.has(board[j][i])) return false;
      set2.add(board[j][i]);
    }
  }

  // 3x3 遍历
  for(let i = 0; i < 3; i++) {
    for(let j = 0; j < 3; j++) {
      set1.clear();
      for(let m = 3 * i; m < 3 * i + 3; m++) {
        for(let n = 3 * j; n < 3 * j + 3; n++) {
          if(board[m][n] !== '.' && set1.has(board[m][n])) return false;
          set1.add(board[m][n]);
        }
      }
    }
  }

  return true;
};

const { logAssert } = require('./tools/LogTools.js');
logAssert(
  isValidSudoku, 
  [["5","3",".",".","7",".",".",".","."]
  ,["6",".",".","1","9","5",".",".","."]
  ,[".","9","8",".",".",".",".","6","."]
  ,["8",".",".",".","6",".",".",".","3"]
  ,["4",".",".","8",".","3",".",".","1"]
  ,["7",".",".",".","2",".",".",".","6"]
  ,[".","6",".",".",".",".","2","8","."]
  ,[".",".",".","4","1","9",".",".","5"]
  ,[".",".",".",".","8",".",".","7","9"]], 
  true
);
logAssert(
  isValidSudoku, 
  [["8","3",".",".","7",".",".",".","."]
  ,["6",".",".","1","9","5",".",".","."]
  ,[".","9","8",".",".",".",".","6","."]
  ,["8",".",".",".","6",".",".",".","3"]
  ,["4",".",".","8",".","3",".",".","1"]
  ,["7",".",".",".","2",".",".",".","6"]
  ,[".","6",".",".",".",".","2","8","."]
  ,[".",".",".","4","1","9",".",".","5"]
  ,[".",".",".",".","8",".",".","7","9"]],
  false
);